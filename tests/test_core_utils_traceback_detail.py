"""Auto-generated by Sourcery"""

import pytest
from types import SimpleNamespace
from sugarcube2_localization.core.utils import traceback_detail

class DummyLoc:
    def __init__(self, line, column):
        self.line = line
        self.column = column

class DummyError:
    def __init__(self, line, column):
        self.loc = DummyLoc(line, column)

@pytest.mark.parametrize(
    "js_code, error, expected, id",
    [
        (
            "let x = 1;\nlet y = 2;",
            DummyError(line=1, column=4),
            ("let x = 1;", "     ^"),
            "first_line_column_4"
        ),
        (
            "let x = 1;\nlet y = 2;",
            DummyError(line=2, column=7),
            ("let y = 2;", "        ^"),
            "second_line_column_7"
        ),
        (
            "a\nb\nc",
            DummyError(line=3, column=0),
            ("c", " ^"),
            "third_line_column_0"
        ),
        (
            "foo();",
            DummyError(line=1, column=5),
            ("foo();", "      ^"),
            "single_line_column_5"
        ),
        (
            "foo();\n",
            DummyError(line=1, column=6),
            ("foo();", "       ^"),
            "line_with_trailing_newline"
        ),
        (
            "a\nb\nc",
            DummyError(line=2, column=1),
            ("b", "  ^"),
            "middle_line_column_1"
        ),
    ],
    ids=lambda p: p if isinstance(p, str) else None
)
def test_traceback_detail_happy_and_edge(js_code, error, expected, id):
    #
    # Act
    result = traceback_detail(js_code, error)

    #
    # Assert
    assert result == expected

@pytest.mark.parametrize(
    "js_code, error, expected_exception, id",
    [
        ("", DummyError(line=1, column=0), IndexError, "empty_code_line_1"),
        ("a\nb", DummyError(line=3, column=0), IndexError, "line_out_of_range"),
        ("a", DummyError(line=0, column=0), IndexError, "zero_line_index"),
        ("a", DummyError(line=-1, column=0), IndexError, "negative_line_index"),
        (None, DummyError(line=1, column=0), AttributeError, "js_code_is_none"),
        ("a", None, AttributeError, "error_is_none"),
        ("a", SimpleNamespace(loc=None), AttributeError, "error_loc_is_none"),
    ],
    ids=lambda p: p if isinstance(p, str) else None
)
def test_traceback_detail_error_cases(js_code, error, expected_exception, id):
    #
    # Act & Assert
    with pytest.raises(expected_exception):
        traceback_detail(js_code, error)
