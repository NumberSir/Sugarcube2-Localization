"""Auto-generated by Sourcery"""

import pytest
from sugarcube2_localization.core.utils import get_all_filepaths

@pytest.mark.parametrize(
    "suffix, files, expected, id",
    [
        (
            ".txt",
            ["a.txt", "b.txt", "subdir/c.txt", "subdir/d.md"],
            ["a.txt", "b.txt", "subdir/c.txt"],
            "finds_txt_files_in_nested_dirs"
        ),
        (
            ".md",
            ["a.txt", "b.txt", "subdir/c.txt", "subdir/d.md"],
            ["subdir/d.md"],
            "finds_md_file_in_subdir"
        ),
        (
            ".csv",
            ["a.txt", "b.txt", "subdir/c.txt", "subdir/d.md"],
            [],
            "no_csv_files_found"
        ),
        (
            "",
            ["a.txt", "b.txt", "subdir/c.txt", "subdir/d.md"],
            ["a.txt", "b.txt", "subdir/c.txt", "subdir/d.md"],
            "empty_suffix_returns_all_files"
        ),
        (
            ".TXT",
            ["A.TXT", "b.txt", "subdir/C.TXT", "subdir/d.md"],
            [],
            "case_sensitive_suffix"
        ),
    ],
    ids=lambda p: p if isinstance(p, str) else None
)
def test_get_all_filepaths_happy_and_edge(tmp_path, suffix, files, expected, id):
    # 
    # Arrange
    for file in files:
        file_path = tmp_path / file
        file_path.parent.mkdir(parents=True, exist_ok=True)
        file_path.touch()

    # 
    # Act
    result = list(get_all_filepaths(suffix, tmp_path))

    # 
    # Assert
    expected_paths = sorted([tmp_path / f for f in expected])
    assert sorted(result) == expected_paths

@pytest.mark.parametrize(
    "suffix, files, id",
    [
        (".txt", [], "empty_directory"),
        (".log", [], "empty_directory_with_unmatched_suffix"),
    ],
    ids=lambda p: p if isinstance(p, str) else None
)
def test_get_all_filepaths_empty_dir(tmp_path, suffix, files, id):
    # 
    # Act
    result = list(get_all_filepaths(suffix, tmp_path))

    # 
    # Assert
    assert not result

@pytest.mark.parametrize(
    "directory, suffix, expected_exception, id",
    [
        ("/nonexistent/path", ".txt", FileNotFoundError, "nonexistent_directory"),
        (123, ".txt", AttributeError, "directory_not_a_path_object"),
        (None, ".txt", AttributeError, "directory_is_none"),
    ],
    ids=lambda p: p if isinstance(p, str) else None
)
def test_get_all_filepaths_error_cases(directory, suffix, expected_exception, id):
    # 
    # Act & Assert
    with pytest.raises(expected_exception):
        list(get_all_filepaths(suffix, directory))
